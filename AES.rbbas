#tag ModuleProtected Module AES	#tag Method, Flags = &h0		Function AES_DECRYPT(keyMaterial As MemoryBlock, inBuffer As MemoryBlock) As MemoryBlock		  Declare Sub blockEcho Lib aesLib (block As Ptr, tag As CString, length As Integer)		  Declare Function makeKey Lib aesLib _		  (keyInstance As Ptr, direction As Integer, keyLen As Integer, keyMaterial As Ptr) _		  As Integer		  Declare Function cipherInit Lib aesLib _		  (cipherInstance As Ptr, mode As Integer, IV As Integer) _		  As Integer		  Declare Function blockEncrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  Declare Function blockDecrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  		  Dim keyInstance, cipherInstance As MemoryBlock		  Dim outBuffer As MemoryBlock		  Dim i, j, memLen, keyLen As Integer		  		  keyLen=keyMaterial.Size()*4		  if keyLen<>128 and keyLen<>192 and keyLen<>256 Then Return Nil		  memLen=keyLen/4		  		  keyInstance=New MemoryBlock(560)		  i=makeKey(keyInstance, DIR_DECRYPT, keyLen, keyMaterial)		  cipherInstance=New MemoryBlock(17)		  i=cipherInit(cipherInstance, MODE_ECB, 0)		  i=inBuffer.size		  outBuffer=New MemoryBlock(i+1)		  j=blockDecrypt(cipherInstance, keyInstance, inBuffer, i*8, outBuffer)		  Return outBuffer		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AES_DECRYPT_VERBOSE(keyMaterial As MemoryBlock, inBuffer As MemoryBlock) As MemoryBlock		  Declare Sub blockEcho Lib aesLib (block As Ptr, tag As CString, length As Integer)		  Declare Function makeKey Lib aesLib _		  (keyInstance As Ptr, direction As Integer, keyLen As Integer, keyMaterial As Ptr) _		  As Integer		  Declare Function cipherInit Lib aesLib _		  (cipherInstance As Ptr, mode As Integer, IV As Integer) _		  As Integer		  Declare Function blockEncrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  Declare Function blockDecrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  		  Dim keyInstance, cipherInstance As MemoryBlock		  Dim outBuffer As MemoryBlock		  Dim i, j, memLen, keyLen As Integer		  		  keyLen=keyMaterial.Size()*4		  if keyLen<>128 and keyLen<>192 and keyLen<>256 Then Return Nil		  memLen=keyLen/4		  		  keyInstance=New MemoryBlock(560)		  		  blockEcho(keyMaterial, "Key", memLen)		  i=makeKey(keyInstance, DIR_DECRYPT, keyLen, keyMaterial)		  Print "makeKey ["+Str(i)+"]"		  cipherInstance=New MemoryBlock(17)		  i=cipherInit(cipherInstance, MODE_ECB, 0)		  Print "cipherInit ["+Str(i)+"]"		  i=inBuffer.size		  outBuffer=New MemoryBlock(i+1)		  j=blockDecrypt(cipherInstance, keyInstance, inBuffer, i*8, outBuffer)		  blockEcho(keyMaterial, "Decrypted: ["+Str(j)+"]", j)		  Print " "		  		  Return outBuffer		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AES_ENCRYPT(keyMaterial As MemoryBlock, clearText As String) As MemoryBlock		  Declare Sub blockEcho Lib aesLib (block As Ptr, tag As CString, length As Integer)		  Declare Function makeKey Lib aesLib _		  (keyInstance As Ptr, direction As Integer, keyLen As Integer, keyMaterial As Ptr) _		  As Integer		  Declare Function cipherInit Lib aesLib _		  (cipherInstance As Ptr, mode As Integer, IV As Integer) _		  As Integer		  Declare Function blockEncrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  Declare Function blockDecrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  		  Dim keyInstance, cipherInstance As MemoryBlock		  Dim inBuffer, outBuffer As MemoryBlock		  Dim i, j, memLen, keyLen As Integer		  		  keyLen=keyMaterial.Size()*4		  if keyLen<>128 and keyLen<>192 and keyLen<>256 Then		    Return Nil		  end if		  memLen=keyLen/4		  		  keyInstance=New MemoryBlock(560)		  i=makeKey(keyInstance, DIR_ENCRYPT, keyLen, keyMaterial)		  cipherInstance=New MemoryBlock(17)		  i=cipherInit(cipherInstance, MODE_ECB, 0)		  i=clearText.LenB()		  Print "Len of clearText="+Str(i)		  // Cleartext's length must be a multiple of 16 bytes!		  j=i Mod 16		  if j<>0 Then		    i=16*((i\16)+1)		  End if		  Print "Len of clearText="+Str(i)		  		  outBuffer=New MemoryBlock(i+1)		  inBuffer=New MemoryBlock(i+1)		  inBuffer.CString(0)=clearText		  j=blockEncrypt(cipherInstance, keyInstance, inBuffer, i*8, outBuffer)		  		  Return outBuffer		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AES_ENCRYPT_VERBOSE(keyMaterial As MemoryBlock, clearText As String) As MemoryBlock		  Declare Sub blockEcho Lib aesLib (block As Ptr, tag As CString, length As Integer)		  Declare Function makeKey Lib aesLib _		  (keyInstance As Ptr, direction As Integer, keyLen As Integer, keyMaterial As Ptr) _		  As Integer		  Declare Function cipherInit Lib aesLib _		  (cipherInstance As Ptr, mode As Integer, IV As Integer) _		  As Integer		  Declare Function blockEncrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  Declare Function blockDecrypt Lib aesLib _		  (cipherInstance As Ptr, keyInstance As Ptr, inBuffer As Ptr, inputLen As Integer, _		  outBuffer As Ptr) As Integer		  		  Dim keyInstance, cipherInstance As MemoryBlock		  Dim inBuffer, outBuffer As MemoryBlock		  Dim i, j, memLen, keyLen As Integer		  		  keyLen=keyMaterial.Size()*4		  if keyLen<>128 and keyLen<>192 and keyLen<>256 Then		    print "keyLen ["+Str(keyLen)+"] is not valid!"		    Return Nil		  end if		  memLen=keyLen/4		  		  keyInstance=New MemoryBlock(560)		  blockEcho(keyMaterial, "Key", memLen)		  i=makeKey(keyInstance, DIR_ENCRYPT, keyLen, keyMaterial)		  Print "makeKey ["+Str(i)+"]"		  cipherInstance=New MemoryBlock(17)		  i=cipherInit(cipherInstance, MODE_ECB, 0)		  Print "cipherInit ["+Str(i)+"]"		  i=clearText.LenB()		  // Cleartext's length must be a multiple of 16 bytes!		  j=i mod 16		  if j<>0 Then		    i=16*((i\16)+1)		  End if		  		  outBuffer=New MemoryBlock(i+1)		  inBuffer=New MemoryBlock(i+1)		  inBuffer.CString(0)=clearText		  Print "Cleartext: "+inBuffer.CString(0)		  j=blockEncrypt(cipherInstance, keyInstance, inBuffer, i*8, outBuffer)		  blockEcho(keyMaterial, "Encrypted: ["+Str(j)+"]", j)		  Print " "		  		  Return outBuffer		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ComputeKeyMaterial(mb As MemoryBlock) As MemoryBlock		  Dim i, j As Integer		  Dim keyMaterial As MemoryBlock		  Dim k As String		  		  j=mb.Size()-1		  keyMaterial=New MemoryBlock((j+1)*2)		  For i=0 to j		    k=RightB("0"+Hex(mb.Byte(i)), 2)		    keyMaterial.Byte(i*2)=AscB(k.LeftB(1))		    keyMaterial.Byte(i*2+1)=AscB(k.RightB(1))		  Next		  		  Return keyMaterial		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ToHexadecimal(Extends mb As MemoryBlock) As String		  Dim i, j, k, n As Integer		  Dim x As MemoryBlock		  Dim s As String		  s="0123456789ABCDEF"		  		  j=mb.Size		  x=new MemoryBlock(j*2*1.2)		  		  j=j-1		  		  For i=0 to j		    n=mb.Byte(i)		    if n<16 Then		      x.StringValue(k, 2)="0"+s.MidB(n+1, 1)		    Else		      x.StringValue(k, 2)=Hex(n)		    End If		    k=k+2		    if i Mod 7 = 0 and i<>0 Then		      x.Byte(k)=32		      k=k+1		    End If		  Next		  		  Return x.StringValue(0, k)		  		End Function	#tag EndMethod	#tag Constant, Name = aesLib, Type = String, Dynamic = False, Default = \"", Scope = Public		#Tag Instance, Platform = Mac Carbon Mach-O, Language = Default, Definition  = \"/usr/local/lib/aes.dylib"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"/usr/local/lib/aes.so"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"C:\\aeslib.dll"	#tag EndConstant	#tag Constant, Name = BITSPERBLOCK, Type = Integer, Dynamic = False, Default = \"128", Scope = Public	#tag EndConstant	#tag Constant, Name = DIR_DECRYPT, Type = Integer, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = DIR_ENCRYPT, Type = Integer, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = MAX_IV_SIZE, Type = Integer, Dynamic = False, Default = \"16", Scope = Public	#tag EndConstant	#tag Constant, Name = MAX_KEY_SIZE, Type = Double, Dynamic = False, Default = \"64", Scope = Public	#tag EndConstant	#tag Constant, Name = MODE_CBC, Type = Integer, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = MODE_CFB1, Type = Integer, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = MODE_ECB, Type = Integer, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule