#tag ClassProtected Class AppInherits ConsoleApplication	#tag Event		Function Run(args() as String) As Integer		  Dim DoWhat As UInt16		  		  InitProblems()		  DoWhat=&b11111111		  		  If Bitwise.BitAnd (DoWhat, &b00000001)>0 Then		    DoProblem01()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b00000010)>0 Then		    DoProblem02()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b00000100)>0 Then		    DoProblem03()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b00001000)>0 Then		    DoProblem04()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b00010000)>0 Then		    DoProblem05()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b00100000)>0 Then		    DoProblem06()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b01000000)>0 Then		    DoProblem07()		  End If		  		  If Bitwise.BitAnd (DoWhat, &b10000000)>0 Then		    DoProblem08()		  End If		  		  Print (EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX+" T H E  E N D"+EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX)		  		  		End Function	#tag EndEvent	#tag Event		Function UnhandledException(error As RuntimeException) As Boolean		  Return True		  		End Function	#tag EndEvent	#tag Method, Flags = &h0		Sub ChunkDecrypt(tmp0 As MemoryBlock, KEYSIZE As Integer)		  Dim tmp1 As MemoryBlock		  Dim i, j, n, x, nb, v As Integer		  Dim EncodingKey As MemoryBlock		  v=0		  EncodingKey=New MemoryBlock(KEYSIZE)		  		  Print EndOfLine.UNIX+"So we'll go with KEYSIZE "+Str(KEYSIZE)		  nb=tmp0.Size/KEYSIZE		  // Length of the blocks we need to create		  x=tmp0.Size-(nb*KEYSIZE)		  Print Str(nb)+" blocks, with a remainder of "+Str(x)		  If x>0 Then		    x=x-1		    tmp1=New MemoryBlock(nb+1)		    For i=0 To x		      // The first x blocks have 1 byte more than the rest		      n=0		      For j=i To tmp0.Size-1 Step KEYSIZE		        tmp1.Byte(n)=tmp0.Byte(j)		        n=n+1		      Next		      Print EndOfLine.UNIX+"Block "+Str(i)+":"		      //ShowHex(tmp1)		      Print " . Getting Best Score"		      Dim maxScorers(), ms As BestScorer		      maxScorers=GetBestScore(tmp1)		      ms=maxScorers(0)		      Print " . Max scorer=["+ChrB(ms.Encoder)+"]. Score: "+Str(ms.Score)		      n=0		      For j=i To tmp0.Size-1 Step KEYSIZE		        tmp0.Byte(j)=ms.ResultString.Byte(n)		        n=n+1		      Next		      EncodingKey.Byte(v)=ms.Encoder		      v=v+1		    Next		  End If		  x=x+1		  tmp1=New MemoryBlock(nb)		  For i=x To KEYSIZE-1		    n=0		    For j=i To tmp0.Size-1 Step KEYSIZE		      tmp1.Byte(n)=tmp0.Byte(j)		      n=n+1		    Next		    Print EndOfLine.UNIX+"Block "+Str(i)+":"		    //ShowHex(tmp1)		    Print " . Getting Best Score"		    Dim maxScorers(), ms As BestScorer		    maxScorers=GetBestScore(tmp1)		    ms=maxScorers(0)		    Print " . Max scorer=["+ChrB(ms.Encoder)+"]. Score: "+Str(ms.Score)		    n=0		    For j=i To tmp0.Size-1 Step KEYSIZE		      tmp0.Byte(j)=ms.ResultString.Byte(n)		      n=n+1		    Next		    EncodingKey.Byte(v)=ms.Encoder		    v=v+1		  Next		  		  Print EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX		  Print "=================="		  Print "      RESULT      "		  Print "=================="		  Print " Encoding Key: "		  ShowHex(EncodingKey)		  Print "=================="+EndOfLine.UNIX		  		  ShowHex(tmp0)		  //Print(tmp0.CString(0))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem01()		  Dim tmp0, tmp1, tmp2 As MemoryBlock		  		  // Problem1		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 1"		  Print "=================="+EndOfLine.UNIX		  Print "String: "+Problem1		  tmp0=ASCII2Hex(Problem1)		  Print "DeHexed: "+tmp0.CString(0)		  tmp1=Base64Encode(tmp0)		  Print "B64 encoded: "+tmp1.CString(0)		  tmp2=Base64Decode(tmp1)		  Print "B64 decoded: "+tmp2.CString(0)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem02()		  Dim tmp0, tmp1, tmp2 As MemoryBlock		  		  // Problem2		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 2"		  Print "=================="+EndOfLine.UNIX		  Print "String: "+Problem2a		  tmp0=ASCII2Hex(Problem2a)		  Print "DeHexed: "		  ShowHex(tmp0)		  Print "String: "+Problem2b		  tmp1=ASCII2Hex(Problem2b)		  Print "DeHexed: "+tmp1.CString(0)		  ShowHex(tmp1)		  Print "XORing"		  tmp2=xorStrings(tmp0, tmp1)		  ShowHex(tmp2)		  Print(tmp2)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem03()		  Dim tmp0 As MemoryBlock		  Dim i, n As Integer		  		  // Problem3		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 3"		  Print "=================="+EndOfLine.UNIX		  Print "String: "+Problem3		  tmp0=ASCII2Hex(Problem3)		  Print "DeHexed: "		  ShowHex(tmp0)		  Dim maxScorers(), ms As BestScorer		  maxScorers=GetBestScore(tmp0)		  n=maxScorers.Ubound		  For i=0 To n		    ms=maxScorers(i)		    Print "=================================="		    Print " Max scorer "+Str(i)+". Score: "+Str(ms.Score)		    Print "=================================="		    ShowHex(ms.OriginalString)		    Print "Encoder: "+Str(ms.Encoder)		    ShowHex(ms.ResultString)		  Next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem04()		  Dim tmp0 As MemoryBlock		  Dim i, j, k, n, score, maxScore As Integer		  Dim ms As BestScorer		  		  // Problem4		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 4"		  Print "=================="+EndOfLine.UNIX		  j=Problem4.Ubound		  maxScore=-1		  Dim myScorers() As BestScorer		  		  For i=0 To j		    //Print EndOfLine.UNIX+"String: "+Problem4(i)		    tmp0=ASCII2Hex(Problem4(i))		    //Print "DeHexed: "		    //ShowHex(tmp0)		    maxScorers=GetBestScore(tmp0)		    ms=maxScorers(0)		    score=ms.Score		    //Print "Line "+Str(i)+". Score: "+Str(score)		    		    If score>=maxScore Then		      k=maxScorers.Ubound		      If score>maxScore Then		        //Print " . New high score! Creating new array of ["+Str(k+1)+"] max scorers."		        ReDim myScorers(-1)		        maxScore=score		      Else		        //Print " . Equally high score! Adding to array of ["+Str(k+1)+"] max scorers."		      End If		      For n=0 To k		        myScorers.Append maxScorers(n)		      Next		    End If		  Next		  n=myScorers.Ubound		  Print(EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX+EndOfLine.UNIX+"Result/"+Str(n+1))		  For i=0 To n		    Print "================="		    Print " Max scorer "+Str(i)+":"		    Print "================="		    ms=myScorers(i)		    ShowHex(ms.OriginalString)		    Print "Encoder: "+Str(ms.Encoder)		    ShowHex(ms.ResultString)		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem05()		  Dim tmp0, tmp1, tmp2, tmp3 As MemoryBlock		  Dim i, j As Integer		  		  // Problem5		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 5"		  Print "=================="+EndOfLine.UNIX		  Print "String: "+Problem5a		  tmp0=Problem5a		  ShowHex(tmp0)		  tmp3=ASCII2Hex(Problem5b)		  j=tmp0.Size		  tmp1="ICE"		  tmp2=xorStrings(tmp0, tmp1)		  Print "tmp0 ^ tmp1: "		  ShowHex(tmp2)		  Print "Expected result:"		  ShowHex(tmp3)		  j=tmp1.Size		  Dim result As Boolean		  result=True		  For i=0 To j-1		    If tmp2.Byte(i)<>tmp3.Byte(i) Then		      Print "["+Str(i)+"]: "+Str(tmp2.Byte(i))+" vs "+Str(tmp3.Byte(i))		      result=False		      Exit		    End If		  Next		  If result Then		    Print "Correct!"		  Else		    Print "FALSE!"		  End If		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem06()		  Dim tmp0, tmp1, tmp2 As MemoryBlock		  Dim i, n, x, nb As Integer		  Dim score, minScore As Double		  		  // Problem6		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 6"		  Print "=================="+EndOfLine.UNIX		  Print "String: "+Problem6a		  Print "String: "+Problem6b		  tmp0=Problem6a		  tmp1=Problem6b		  score=HammingDistance(tmp0, tmp1)		  Print "Hamming Distance: "+Str(score)		  If score=37 Then		    Print "Correct!"		  Else		    Print "FALSE!"		  End If		  Print EndOfLine.UNIX+"Buffer:"		  tmp0=Base64Decode(Problem6Buffer)		  ShowHex(tmp0)		  		  Dim distance As Integer		  Dim distances() As HammingScore		  minScore=1000000.0		  x=-1		  For i=2 To 30		    tmp1=New MemoryBlock(i)		    tmp2=New MemoryBlock(i)		    nb=tmp0.Size/i/2		    For x=0 to nb-1		      For n=0 To i-1		        tmp1.Byte(n)=tmp0.Byte(x*i+n)		        tmp2.Byte(n)=tmp0.Byte(x*i+n+i)		      Next		      distance=distance+HammingDistance(tmp1, tmp2)		    Next		    distance=distance/nb		    Dim hd As New HammingScore(distance, i)		    distances.Append(hd)		  Next		  		  Print EndOfLine.UNIX+"#: KS / DS / NED"		  BubbleSort(distances)		  n=distances.Ubound		  For i=0 to n		    Print Str(i)+": "+Str(distances(i).KEYSIZE)+" / "+Str(distances(i).Distance)+" / "+Str(distances(i).NormalizedEditDistance)		  Next		  		  Dim KEYSIZE As Integer		  KEYSIZE=distances(0).KEYSIZE		  		  ChunkDecrypt(tmp0, KEYSIZE)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem07()		  Dim keyMaterial, mb, rslt As MemoryBlock		  		  // Problem6		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 6"		  Print "=================="+EndOfLine.UNIX		  		  Print "Key:"		  keyMaterial=New MemoryBlock(32)		  mb="YELLOW SUBMARINE"		  keyMaterial=ComputeKeyMaterial(mb)		  ShowHex(mb)		  ShowHex(keyMaterial)		  Print "=================="+EndOfLine.UNIX		  Print "Encoded Buffer:"		  Print "=================="		  mb=Base64Decode(Problem7Buffer)		  ShowHex(mb)		  Print "=================="+EndOfLine.UNIX		  Print "Decoded Buffer:"		  Print "=================="		  rslt=AES_DECRYPT(keyMaterial, mb)		  Print(rslt.CString(0))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoProblem08()		  Dim tmp0 As MemoryBlock		  Dim i, j, k, x, nb, w, z As Integer		  Dim maxScore As Integer		  Dim s, t() As String		  		  // Problem8		  Print EndOfLine.UNIX+EndOfLine.UNIX+"=================="		  Print "Problem 8"		  Print "=================="		  z=Problem8Strings.Ubound		  maxScore=-1		  Dim KEYSIZE As Integer		  KEYSIZE=32		  tmp0=Problem8Strings(132)		  j=tmp0.Size		  nb=j/KEYSIZE		  		  // We'll work with raw ASCII for now		  For w=0 To z		    tmp0=Problem8Strings(w)		    For i=0 To j-1 Step KEYSIZE		      s=tmp0.StringValue(i, KEYSIZE)		      t.Append s		    Next		    t.Sort()		    //Print Join(t, EndOfLine.UNIX)		    x=t.Ubound-1		    		    For k=0 To x		      If t(k)=t(k+1) Then		        Print "We have a match! String #"+Str(w)+" has "+t(k)+" appearing several times."		        ShowHex(tmp0, 32, t(k), "<-- this one")		        		        w=z		        k=x		      End If		    Next		    		  Next		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		maxScorers() As BestScorer	#tag EndProperty	#tag ViewBehavior	#tag EndViewBehaviorEnd Class#tag EndClass